/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_getHello"];
  };
  "/api/users/{idOrUsername}": {
    get: operations["UsersController_getUser"];
  };
  "/api/users/email": {
    patch: operations["UsersController_updateEmail"];
  };
  "/api/users": {
    delete: operations["UsersController_deleteUser"];
    patch: operations["UsersController_updateUser"];
  };
  "/api/auth/sign-up": {
    post: operations["AuthController_signUp"];
  };
  "/api/auth/sign-in": {
    post: operations["AuthController_signIn"];
  };
  "/api/auth/refresh-access": {
    post: operations["AuthController_refreshAccess"];
  };
  "/api/auth/logout": {
    post: operations["AuthController_logout"];
  };
  "/api/auth/me": {
    get: operations["AuthController_getMe"];
  };
  "/api/auth/confirm-email": {
    post: operations["AuthController_confirmEmail"];
  };
  "/api/auth/forgot-password": {
    post: operations["AuthController_forgotPassword"];
  };
  "/api/auth/reset-password": {
    post: operations["AuthController_resetPassword"];
  };
  "/api/auth/update-password": {
    patch: operations["AuthController_updatePassword"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ResponseUserMapper: {
      /**
       * @description User id
       * @example 123
       */
      id: number;
      /**
       * @description User name
       * @example John Doe
       */
      name: string;
      /**
       * @description User username
       * @example john.doe1
       */
      username: string;
      /** @description Is user confirmed by email or not */
      confirmed: boolean;
      /**
       * @description User creation date
       * @example 2021-01-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * @description User last update date
       * @example 2021-01-01T00:00:00.000Z
       */
      updatedAt: string;
    };
    ChangeEmailDto: {
      /** @description The password of the user */
      password: string;
      /**
       * @description The email of the user
       * @example someone@gmail.com
       */
      email: string;
    };
    AuthResponseUserMapper: {
      /**
       * @description User id
       * @example 123
       */
      id: number;
      /**
       * @description User name
       * @example John Doe
       */
      name: string;
      /**
       * @description User username
       * @example john.doe1
       */
      username: string;
      /**
       * @description User email
       * @example example@gmail.com
       */
      email: string;
      /**
       * @description User creation date
       * @example 2021-01-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * @description User last update date
       * @example 2021-01-01T00:00:00.000Z
       */
      updatedAt: string;
    };
    UpdateUserDto: {
      /**
       * @description The new username
       * @example new-username
       */
      username: string;
      /**
       * @description The new name
       * @example John Doe
       */
      name: string;
    };
    PasswordDto: {
      /** @description The password of the user */
      password: string;
    };
    SignUpDto: {
      /** @description New password */
      password: string;
      /** @description Password confirmation */
      repeatedPassword: string;
      /** @description The user name */
      name: string;
      /**
       * @description The user email
       * @example example@gmail.com
       */
      email: string;
    };
    MessageMapper: {
      /**
       * @description Message UUID
       * @example c0a80121-7ac0-11d1-898c-00c04fd8d5cd
       */
      id: string;
      /**
       * @description Message
       * @example Hello World
       */
      message: string;
    };
    SignInDto: {
      /** @description New password */
      password: string;
      /** @description Username or email */
      emailOrUsername: string;
    };
    AuthResponseMapper: {
      /** @description User */
      user: components["schemas"]["AuthResponseUserMapper"];
      /**
       * @description Access token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      accessToken: string;
    };
    ConfirmEmailDto: {
      /**
       * @description The JWT token sent to the user email
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      confirmationToken: string;
    };
    EmailDto: {
      /**
       * @description The email of the user
       * @example someone@gmail.com
       */
      email: string;
    };
    ResetPasswordDto: {
      /** @description New password */
      password: string;
      /** @description Password confirmation */
      repeatedPassword: string;
      /**
       * @description The JWT token sent to the user email
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      resetToken: string;
    };
    ChangePasswordDto: {
      /** @description New password */
      password: string;
      /** @description The current password */
      changedPassword: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getHello: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  UsersController_getUser: {
    parameters: {
      path: {
        /**
         * @description The id or username of the user
         * @example 56262 or 'username'
         */
        idOrUsername: string;
      };
    };
    responses: {
      /** @description The user is found and returned. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserMapper"];
        };
      };
      /** @description Something is invalid on the request body */
      400: {
        content: never;
      };
      /** @description The user is not found. */
      404: {
        content: never;
      };
    };
  };
  UsersController_updateEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeEmailDto"];
      };
    };
    responses: {
      /** @description The email is updated, and the user is returned. */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponseUserMapper"];
        };
      };
      /** @description Something is invalid on the request body, or wrong password. */
      400: {
        content: never;
      };
      /** @description The user is not logged in. */
      401: {
        content: never;
      };
    };
  };
  UsersController_deleteUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordDto"];
      };
    };
    responses: {
      /** @description The user is deleted. */
      204: {
        content: never;
      };
      /** @description Something is invalid on the request body, or wrong password. */
      400: {
        content: never;
      };
      /** @description The user is not logged in. */
      401: {
        content: never;
      };
    };
  };
  UsersController_updateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      /** @description The username is updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserMapper"];
        };
      };
      /** @description Something is invalid on the request body. */
      400: {
        content: never;
      };
      /** @description The user is not logged in. */
      401: {
        content: never;
      };
    };
  };
  AuthController_signUp: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDto"];
      };
    };
    responses: {
      /** @description The user has been created and is waiting confirmation */
      201: {
        content: {
          "application/json": components["schemas"]["MessageMapper"];
        };
      };
      /** @description Something is invalid on the request body */
      400: {
        content: never;
      };
      /** @description Email already in use */
      409: {
        content: never;
      };
    };
  };
  AuthController_signIn: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      /** @description Logs in the user and returns the access token */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponseMapper"];
        };
      };
      /** @description Something is invalid on the request body */
      400: {
        content: never;
      };
      /** @description Invalid credentials or User is not confirmed */
      401: {
        content: never;
      };
    };
  };
  AuthController_refreshAccess: {
    responses: {
      /** @description Refreshes and returns the access token */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponseMapper"];
        };
      };
      /** @description Something is invalid on the request body, or Token is invalid or expired */
      400: {
        content: never;
      };
      /** @description Invalid token */
      401: {
        content: never;
      };
    };
  };
  AuthController_logout: {
    responses: {
      /** @description The user is logged out */
      200: {
        content: {
          "application/json": components["schemas"]["MessageMapper"];
        };
      };
      /** @description Something is invalid on the request body */
      400: {
        content: never;
      };
      /** @description Invalid token */
      401: {
        content: never;
      };
    };
  };
  AuthController_getMe: {
    responses: {
      /** @description The user is found and returned. */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponseUserMapper"];
        };
      };
      /** @description The user is not logged in. */
      401: {
        content: never;
      };
    };
  };
  AuthController_confirmEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfirmEmailDto"];
      };
    };
    responses: {
      /** @description Confirms the user email and returns the access token */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponseMapper"];
        };
      };
      /** @description Something is invalid on the request body, or Token is invalid or expired */
      400: {
        content: never;
      };
      /** @description Invalid token */
      401: {
        content: never;
      };
    };
  };
  AuthController_forgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailDto"];
      };
    };
    responses: {
      /** @description An email has been sent to the user with the reset password link */
      200: {
        content: {
          "application/json": components["schemas"]["MessageMapper"];
        };
      };
    };
  };
  AuthController_resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordDto"];
      };
    };
    responses: {
      /** @description The password has been reset */
      200: {
        content: {
          "application/json": components["schemas"]["MessageMapper"];
        };
      };
      /** @description Something is invalid on the request body, or Token is invalid or expired */
      400: {
        content: never;
      };
    };
  };
  AuthController_updatePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordDto"];
      };
    };
    responses: {
      /** @description The password has been updated */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponseMapper"];
        };
      };
      /** @description The user is not logged in. */
      401: {
        content: never;
      };
    };
  };
}
